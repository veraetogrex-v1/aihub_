// AI Integration for LifeQuest using AIMLAPI.COM

export interface Task {
  id: string
  title: string
  completed: boolean
  xp: number
}

interface ChatMessage {
  role: 'system' | 'user' | 'assistant'
  content: string
}

interface ChatCompletionResponse {
  choices: {
    message: {
      content: string
    }
  }[]
}

interface QuestResponse {
  title: string
  description: string
  xp: number
}

const API_ENDPOINT = 'https://api.aimlapi.com/v1/chat/completions'
const API_KEY = import.meta.env.VITE_AIMLAPI_KEY
const MODEL = 'chatgpt-4o-latest'

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AIMLAPI
 */
async function callAI(messages: ChatMessage[]): Promise<string> {
  console.log('ü§ñ [AI] Starting AI request...')
  console.log('üîë [AI] API_KEY exists:', !!API_KEY)
  console.log('üîë [AI] API_KEY length:', API_KEY?.length || 0)
  console.log('üåê [AI] Endpoint:', API_ENDPOINT)
  console.log('üìù [AI] Model:', MODEL)

  if (!API_KEY) {
    console.error('‚ùå [AI] No API key found!')
    throw new Error('VITE_AIMLAPI_KEY is not configured. Please set it in your .env file.')
  }

  if (API_KEY === 'your_api_key_here') {
    console.error('‚ùå [AI] Using placeholder API key!')
    throw new Error('Please replace "your_api_key_here" with a real API key in .env file.')
  }

  try {
    const requestBody = {
      model: MODEL,
      messages,
      temperature: 0.7,
      max_tokens: 500,
    }

    console.log('üì§ [AI] Sending request to AIMLAPI...')
    console.log('üì§ [AI] Request body:', JSON.stringify(requestBody, null, 2))

    const response = await fetch(API_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${API_KEY}`,
      },
      body: JSON.stringify(requestBody),
    })

    console.log('üì• [AI] Response status:', response.status, response.statusText)

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      console.error('‚ùå [AI] API error response:', errorData)
      throw new Error(
        `API request failed: ${response.status} ${response.statusText}. ${
          errorData.error?.message || ''
        }`
      )
    }

    const data: ChatCompletionResponse = await response.json()
    console.log('‚úÖ [AI] Response received successfully')
    console.log('üìÑ [AI] Response data:', JSON.stringify(data, null, 2))

    if (!data.choices || !data.choices[0]?.message?.content) {
      console.error('‚ùå [AI] Invalid response format:', data)
      throw new Error('Invalid response format from API')
    }

    console.log('‚úÖ [AI] AI response:', data.choices[0].message.content)
    return data.choices[0].message.content
  } catch (error) {
    console.error('‚ùå [AI] Error in callAI:', error)
    throw error
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∂–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
 */
export function getMoodEmoji(mood: number): string {
  const moods: Record<number, string> = {
    1: 'üò¢',
    2: 'üòï',
    3: 'üòê',
    4: 'üòä',
    5: 'üéâ',
  }
  return moods[mood] || 'üòê'
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
 */
export function extractCategories(tasks: Task[]): string[] {
  const categoryKeywords: Record<string, string[]> = {
    '–†–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á–∞', '–≤—Å—Ç—Ä–µ—á–∞', '–æ—Ç—á–µ—Ç', '–∫–æ–¥', 'programming'],
    '–ó–¥–æ—Ä–æ–≤—å–µ': ['—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '–≤—Ä–∞—á', 'workout', 'exercise'],
    '–î–æ–º': ['—É–±–æ—Ä–∫–∞', '–ø–æ–∫—É–ø–∫–∏', '–≥–æ—Ç–æ–≤–∫–∞', '—Ä–µ–º–æ–Ω—Ç', 'cleaning', 'shopping'],
    '–£—á–µ–±–∞': ['—É—á–µ–±–∞', '–∫—É—Ä—Å', '–∫–Ω–∏–≥–∞', '–∏–∑—É—á–∏—Ç—å', 'learn', 'study'],
    '–õ–∏—á–Ω–æ–µ': ['–∑–≤–æ–Ω–æ–∫', '–¥—Ä—É–∑—å—è', '—Å–µ–º—å—è', '—Ö–æ–±–±–∏', 'hobby', 'family'],
  }

  const foundCategories = new Set<string>()

  tasks.forEach(task => {
    const lowerTitle = task.title.toLowerCase()

    Object.entries(categoryKeywords).forEach(([category, keywords]) => {
      if (keywords.some(keyword => lowerTitle.includes(keyword))) {
        foundCategories.add(category)
      }
    })
  })

  return Array.from(foundCategories)
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ò–ò –∫–∞–∫—É—é –∑–∞–¥–∞—á—É –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å
 */
export async function getAISuggestion(tasks: Task[], mood: number): Promise<string> {
  console.log('üéØ [getAISuggestion] Called with:', { tasksCount: tasks.length, mood })

  const incompleteTasks = tasks.filter(task => !task.completed)
  console.log('üìã [getAISuggestion] Incomplete tasks:', incompleteTasks.length)

  if (incompleteTasks.length === 0) {
    console.log('‚úÖ [getAISuggestion] No incomplete tasks, returning success message')
    return 'üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –í—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏!'
  }

  const moodEmoji = getMoodEmoji(mood)
  const categories = extractCategories(incompleteTasks)
  console.log('üìä [getAISuggestion] Categories:', categories)
  console.log('üòä [getAISuggestion] Mood emoji:', moodEmoji)

  const tasksList = incompleteTasks
    .map((task, idx) => `${idx + 1}. ${task.title} (${task.xp} XP)`)
    .join('\n')

  const systemPrompt = `–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ—É—á –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ LifeQuest.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.

–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:
- –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∏–∑–∫–æ–µ (1-2) ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞
- –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–µ (3) ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π –∑–∞–¥–∞—á–∏ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
- –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ (4-5) ‚Äî –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å—Å—è –∑–∞ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏
- –£—á–∏—Ç—ã–≤–∞–π XP –∑–∞–¥–∞—á –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Ö –≤–∞–∂–Ω–æ—Å—Ç–∏
- –ë—É–¥—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –°–¢–†–û–ì–û: "üéØ –†–µ–∫–æ–º–µ–Ω–¥—É—é: [–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]. [–ö—Ä–∞—Ç–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]"`

  const userPrompt = `–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${moodEmoji} (${mood}/5)
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á: ${categories.length > 0 ? categories.join(', ') : '–°–º–µ—à–∞–Ω–Ω—ã–µ'}

–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:
${tasksList}

–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –º–Ω–µ –ª—É—á—à–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å?`

  try {
    console.log('üöÄ [getAISuggestion] Calling callAI...')
    const response = await callAI([
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt },
    ])

    console.log('‚úÖ [getAISuggestion] Received response from AI')
    return response.trim()
  } catch (error) {
    console.error('‚ùå [getAISuggestion] Error getting AI suggestion:', error)

    // Fallback: –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    const randomTask = incompleteTasks[Math.floor(Math.random() * incompleteTasks.length)]
    const fallbackMessage = `üéØ –†–µ–∫–æ–º–µ–Ω–¥—É—é: ${randomTask.title}. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞!`
    console.log('üîÑ [getAISuggestion] Using fallback:', fallbackMessage)
    return fallbackMessage
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É-–∫–≤–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
 */
export async function generateQuest(
  completedTasksCount: number,
  existingTasks: Task[],
  mood: number
): Promise<QuestResponse> {
  console.log('‚ú® [generateQuest] Called with:', { completedTasksCount, tasksCount: existingTasks.length, mood })

  const moodEmoji = getMoodEmoji(mood)
  const categories = extractCategories(existingTasks)
  console.log('üìä [generateQuest] Categories:', categories)
  console.log('üòä [generateQuest] Mood emoji:', moodEmoji)

  const recentTasks = existingTasks
    .slice(-5)
    .map(task => task.title)
    .join(', ')

  const systemPrompt = `–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è LifeQuest.
–°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.

–ü—Ä–∞–≤–∏–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤:
- –ö–≤–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º–∏
- XP –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: 10-30 –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö, 40-70 –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö, 80-150 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö
- –£—á–∏—Ç—ã–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–µ –∫–≤–µ—Å—Ç—ã
- –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤, –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞",
  "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞",
  "xp": —á–∏—Å–ª–æ
}`

  const userPrompt = `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${moodEmoji} (${mood}/5)
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${completedTasksCount}
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: ${categories.length > 0 ? categories.join(', ') : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
${recentTasks ? `–ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${recentTasks}` : ''}

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç!`

  try {
    console.log('üöÄ [generateQuest] Calling callAI...')
    const response = await callAI([
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt },
    ])

    console.log('‚úÖ [generateQuest] Received response from AI')
    console.log('üìù [generateQuest] Raw response:', response)

    // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    let jsonStr = response.trim()
    jsonStr = jsonStr.replace(/```json\n?/g, '').replace(/```\n?/g, '')
    console.log('üîÑ [generateQuest] Cleaned JSON:', jsonStr)

    // –ü–∞—Ä—Å–∏–º JSON
    const quest: QuestResponse = JSON.parse(jsonStr)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!quest.title || !quest.description || typeof quest.xp !== 'number') {
      throw new Error('Invalid quest format')
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    quest.title = quest.title.slice(0, 50)
    quest.description = quest.description.slice(0, 100)
    quest.xp = Math.max(10, Math.min(150, quest.xp)) // XP –º–µ–∂–¥—É 10 –∏ 150

    return quest
  } catch (error) {
    console.error('Error generating quest:', error)

    // Fallback –∫–≤–µ—Å—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const fallbackQuests: Record<number, QuestResponse> = {
      1: {
        title: '‚òï –°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤ –∏ –≤—ã–ø–µ–π –≤–æ–¥—ã',
        description: '–ù–µ–±–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö –ø–æ–º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã –∏ —É–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
        xp: 15,
      },
      2: {
        title: 'üéµ –ü–æ—Å–ª—É—à–∞–π –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É 10 –º–∏–Ω—É—Ç',
        description: '–ú—É–∑—ã–∫–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—à–µ–Ω–∏—è',
        xp: 20,
      },
      3: {
        title: 'üìö –ü—Ä–æ—á–∏—Ç–∞–π 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∫–Ω–∏–≥–∏',
        description: '–ß—Ç–µ–Ω–∏–µ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∫—Ä—É–≥–æ–∑–æ—Ä',
        xp: 30,
      },
      4: {
        title: 'üí™ –°–¥–µ–ª–∞–π 15-–º–∏–Ω—É—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        description: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ª—É—á—à–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        xp: 50,
      },
      5: {
        title: 'üöÄ –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π –ø—Ä–æ–µ–∫—Ç',
        description: '–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –ø–∏–∫–µ! –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ü–µ–ª–µ–π',
        xp: 100,
      },
    }

    return fallbackQuests[mood] || fallbackQuests[3]
  }
}
